basePath: /api/v1
definitions:
  schemas.AuthRequestSchema:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  schemas.AuthResponseSchema:
    properties:
      access:
        type: string
    type: object
  schemas.AuthVerificationKeySchema:
    properties:
      verification_key:
        type: string
    type: object
  schemas.AuthVerificationSchema:
    properties:
      code:
        type: string
      verification_key:
        type: string
    type: object
  schemas.RecendVerificationSchema:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  schemas.UserCreate:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Learning Golang
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/schemas.AuthRequestSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.AuthResponseSchema'
      tags:
      - Auth
  /auth/recend-verification-code:
    post:
      parameters:
      - description: Recend Verification Code
        in: body
        name: RecendVerification
        required: true
        schema:
          $ref: '#/definitions/schemas.RecendVerificationSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.AuthVerificationKeySchema'
      tags:
      - Auth
  /auth/recovery-codes:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.AuthVerificationKeySchema'
      security:
      - BearerAuth: []
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/schemas.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.AuthVerificationKeySchema'
      tags:
      - Auth
  /auth/verify:
    post:
      consumes:
      - application/json
      parameters:
      - description: Verification data
        in: body
        name: verification
        required: true
        schema:
          $ref: '#/definitions/schemas.AuthVerificationSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.AuthVerificationKeySchema'
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
